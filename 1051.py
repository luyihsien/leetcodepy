'''
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
'''
c=[1,2,3,4]
e=c[:]
c.remove(3)
print(c)
print(e)
a=[1,1,4,2,1,3]
b=a.copy()#b=a則兩個都被sort
a.sort()#似append remove pop
print(b)
print(a)
c=0
for i in range(len(a)):
    if a[i]!=b[i]:
        c+=1
class Solution:
    def prevPermOpt1(self, A):
        for i in range(len(A)-1,-1,-1):#最尾
            for j in range(i-1,-1,-1):#忘記打range#從尾一路回頭
                if A[i]<=A[j]:
                    self.prevPermOpt1(A[j:i])
                else:
                    tmp=A[i]
                    A[i]=A[j]
                    A[j]=tmp

                return A

        return A

print(Solution().prevPermOpt1([6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,5,3,1,1,3]))
'''
提交结果：解答错误 
输入：
[6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,5,3,1,1,3]
输出：
[6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,3,3,1,1,5]
预期：
[6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,5,1,1,3,3]
'''